import { Button } from '@mui/material'
import { getSession, useSession } from 'next-auth/react'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useState } from 'react'
import styles from '../styles/Home.module.css'
import { Session } from 'next-auth';
import { signOut } from "next-auth/react"
import { GetServerSideProps } from 'next/types'

export default function Home() {
  const { data: session } = useSession()

  return (
    <div className={styles.container}>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {session ? <User session={session} /> : <Guest />}
    </div>
  )
}

//Guest
function Guest(){
  return (
    <main className="container mx-auto text-center py-20">
      <h3 className="text-4xl font-bold">
        Guest Homepage
      </h3>

      <div className="flex justify-center">
        <Link className="text-blue-600" href={'/signin'}>Sign In</Link>
      </div>
    </main>
  )
}
//Authorize User
const User = (props: { session: Session }) =>{
  const {session} = props
  const handleSingOut = async () => {
    signOut()
  }
  return (
    <main className="container mx-auto text-center py-20">
      <h3 className="text-4xl font-bold">
      Authorize User Homepage
      </h3>

      {
        session &&
          <div>
            <p>{session?.user?.name || ''}</p>
            <p>{session?.user?.email || ''}</p>
          </div>
      }

      <div className="flex justify-center">
        <Button className="text-blue-600" onClick={handleSingOut}>Sign Out</Button>
      </div>
      <div className="flex justify-center">
        <Link className="text-blue-600" href={'/profile'}>Profile</Link>
      </div>
    </main>
  )
}

export const getServerSideProps: GetServerSideProps = async ({req}) => {
  const session = await getSession({req})

  if(!session){
    return{
      redirect:{
        destination:'signin',
        permanent: false
      }
    }
  }
  return {
    props: {session}
  }
}
